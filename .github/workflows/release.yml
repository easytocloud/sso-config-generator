name: Release
on:
  push:
    branches:
      - main

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Install semantic-release
        run: |
          npm install -g semantic-release @semantic-release/changelog @semantic-release/git

      - name: Get Version
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run semantic-release in dry-run mode and capture all output
          output=$(npx semantic-release --dry-run --initial-version 2025.1.0 2>&1)
          echo "Semantic Release Output:"
          echo "$output"
          
          # Check for different patterns in the output
          if echo "$output" | grep -q "Published release"; then
            # Extract version from "Published release X.Y.Z on default channel"
            version=$(echo "$output" | grep -oP 'Published release \K[0-9]+\.[0-9]+\.[0-9]+' | head -1)
            echo "new_release_version=$version" >> $GITHUB_OUTPUT
            echo "Version to be released: $version"
          elif echo "$output" | grep -q "next release version is"; then
            # Extract version from "the next release version is X.Y.Z"
            version=$(echo "$output" | grep -oP 'next release version is \K[0-9]+\.[0-9]+\.[0-9]+')
            echo "new_release_version=$version" >> $GITHUB_OUTPUT
            echo "Version to be released: $version"
          else
            echo "No new version to be released"
            exit 0
          fi

      - name: Create Release
        if: steps.semantic.outputs.new_release_version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --initial-version 2025.1.0

      - name: Update Version in Files
        if: steps.semantic.outputs.new_release_version != ''
        run: |
          # Update version in __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"${{ steps.semantic.outputs.new_release_version }}\"/" src/sso_config_generator/__init__.py
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"${{ steps.semantic.outputs.new_release_version }}\"/" pyproject.toml
          
          # Commit the version updates
          git config --local user.email "github-actions@github.com"
          git config --local user.name "GitHub Actions"
          git add src/sso_config_generator/__init__.py pyproject.toml
          git commit -m "chore: update version to ${{ steps.semantic.outputs.new_release_version }} [skip ci]"
          git push

      - name: Build package
        if: steps.semantic.outputs.new_release_version != ''
        env:
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ steps.semantic.outputs.new_release_version }}
        run: python -m build

      - name: Publish to PyPI
        if: steps.semantic.outputs.new_release_version != ''
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: twine upload dist/*
